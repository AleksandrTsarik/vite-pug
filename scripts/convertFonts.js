// scripts/convertFonts.js
const fs = require('fs');
const path = require('path');
const fontmin = require('fontmin');

const inputDir = path.join(__dirname, '../src/assets/fonts');
const outputDir = path.join(__dirname, '../dist/assets/fonts');
const scssFile = path.join(__dirname, '../src/assets/scss/_fonts.scss');
const cacheFile = path.join(__dirname, '.fontcache.json');

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏
[outputDir, path.dirname(scssFile)].forEach(dir => {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
});

// –ß–∏—Ç–∞–µ–º –∫—ç—à
let cache = {};
if (fs.existsSync(cacheFile)) {
  try {
    cache = JSON.parse(fs.readFileSync(cacheFile, 'utf-8'));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞:', e);
    cache = {};
  }
}

// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ —à—Ä–∏—Ñ—Ç—ã
const files = fs.readdirSync(inputDir).filter(f => /\.(ttf|otf)$/i.test(f));

if (files.length === 0) {
  console.log('‚ö†Ô∏è –ù–µ—Ç —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.');
  process.exit(0);
}

const current = {};
files.forEach(file => {
  const filePath = path.join(inputDir, file);
  const stat = fs.statSync(filePath);
  current[file] = `${stat.size}-${stat.mtimeMs}`;
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
const hasChanges = Object.keys(current).some(file => cache[file] !== current[file]);
if (!hasChanges) {
  console.log('‚úÖ –®—Ä–∏—Ñ—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.');
  process.exit(0);
}

console.log('üîÑ –®—Ä–∏—Ñ—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...');

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
files.forEach(file => {
  const filePath = path.join(inputDir, file);
  const filename = path.basename(file, path.extname(file));

  new fontmin()
    .src(filePath)
    .use(fontmin.ttf2woff())
    .use(fontmin.ttf2woff2())
    .dest(outputDir)
    .run(err => {
      if (err) throw err;
      console.log(`‚úÖ ${file} ‚Üí woff + woff2`);
    });
});

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SCSS
const scssContent = files.map(file => {
  const filename = path.basename(file, path.extname(file));
  return `
@font-face {
  font-family: '${filename}';
  src: url('../fonts/${filename}.woff') format('woff'),
       url('../fonts/${filename}.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
`;
}).join('\n\n').trim();

fs.writeFileSync(scssFile, scssContent);
console.log('‚úÖ _fonts.scss –æ–±–Ω–æ–≤–ª—ë–Ω');

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
fs.writeFileSync(cacheFile, JSON.stringify(current, null, 2));
console.log('‚úÖ –ö—ç—à —à—Ä–∏—Ñ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω');